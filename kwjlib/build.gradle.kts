/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    groovy

    jacoco
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

group = "org.kwj"
version = "1.0.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for Spock testing
    testImplementation(libs.groovy)

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation(libs.spock.core)
    testImplementation(libs.junit)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile
    // classpath.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java { toolchain { languageVersion = JavaLanguageVersion.of(21) } }

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // Enable JaCoCo test coverage
    finalizedBy(tasks.jacocoTestReport)
}

// Configure JaCoCo
jacoco {
    toolVersion = "0.8.12"
}

publishing {
    publications {
        create<MavenPublication>("kwjlib") {
            from(components["java"])
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/WilkinsonK/kwjlib")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "0.75".toBigDecimal()
            }
        }

        rule {
            enabled = true
            element = "CLASS"
            includes = listOf("org.kwj.monoid.option.*", "org.kwj.monoid.result.*")

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = "0.85".toBigDecimal()
            }
        }
    }
}

tasks.check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}

// Helpful tasks for coverage reports
tasks.register("coverage") {
    group = "verification"
    description = "Runs tests and generates coverage report"
    dependsOn(tasks.test, tasks.jacocoTestReport)
}

tasks.register("coverageReport") {
    group = "verification"
    description = "Opens the HTML coverage report in default browser"
    dependsOn(tasks.jacocoTestReport)
    doLast {
        val reportFile = file("build/reports/jacoco/test/html/index.html")
        if (reportFile.exists()) {
            println("Coverage report: ${reportFile.toURI()}")
            // Try to open in browser on different platforms
            val os = System.getProperty("os.name").lowercase()
            when {
                os.contains("mac") -> exec { commandLine("open", reportFile.absolutePath) }
                os.contains("windows") -> exec { commandLine("cmd", "/c", "start", reportFile.absolutePath) }
                os.contains("linux") -> exec { commandLine("xdg-open", reportFile.absolutePath) }
                else -> println("Please open the coverage report manually: ${reportFile.absolutePath}")
            }
        } else {
            println("Coverage report not found. Run 'gradle coverage' first.")
        }
    }
}
